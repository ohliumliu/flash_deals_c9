c
session[:dealer_id]
c
session[:dealer_id]
c
session[:dealer_id]
c
session[:dealer_id]
c
session[:user_id]
session[:dealer_id]
c
n
c
session[:dealer_id]
session[:user_id]
c
session[:user_id]
c
n
c
n
session[:dealer_id]
n
session[:dealer_id]
n
session[:dealer_id]
n
session[:dealer_id]
n
c
session[:dealer_id]
c
session[:dealer_id]
n
session[:dealer_id] = params[:dealer_id]
c
session[:dealer_id]
session[:dealer_id] = params[:dealer_id]
params[:dealer_id]
session[:dealer_di]
n
session
c
session
c
n
session
n
session
c
n
parsed_product_hash[:merchant_id]
expected_product[:merchant_id]
c
Product.first
value
expected_product[key]
key
c
expected_product[key]
value
key
c
expected_product[key]
value
key
c
expected_product[key]
value
vlaue
assert_equal expected_product[key], value
key
c
assert_equal expected_product[key], value
c
assert_equal expected_product[key], value
key
c
key
assert_equal expected_product[key], value
c
assert_equal expected_product[key], value
c
assert_equal expected_product[key], value
c
assert_equal expected_product[key], value
c
assert_equal expected_product[key], value
assert_equal expected_prodct[key], value
key
c
existing_product
c
existing_product
c
product_hash
existing_product
c
existing_product
product_hash
c
existing_product
existing_product.update(product_hash)
product_hash[:percentage_saved] = 76
existing_product
existing_product.update(product_hash)
product_hash
existing_product
c
product_hash
existing_product
existing_product.save!
existing_product
existing_product.save
existing_product
existing_product.update(product_hash)
product_hash
existing_product.class
existing_product
c
@job
@user=User.find(user_id)
user_id
exit
User.find(session[:user_id])
c
@import_amazon_ongoing
c
@job
c
n
c
ApplicationController.session
ApplicationController
session
User.all
Product.all
exit
session[:user_id]
continue
products
c
n
Digest::SHA1.hexdigest("")
@user.valid?
@user
c
n
c
@user_id
continue
@user.errors
@user.save
c
@user.errors
@user.save
@user[:password_confirmation] = "xxx"
@user
@user.errors
@user.save
@user.errors
c
@user.errors
@user.save
c
@user.errors
@user.save
@user.valid?
@user.errors
c
n
next
session[:user].nil?
session[:user]
next
continue
@user
continue
session[:user]
continue
session[:user]
continue
session[:user]
session
continue
@user
continue
@user
continue
next
continue
@user
next
@user
next
continue
user.nil?
user.save
@user.save
user.nil?
user = User.new
@user
continue
next
help
@user.errors
@user
